@inherits LayoutComponentBase
@inject ILocalStorageService LocalStore
@inject IAuthProvider AuthProvider
@inject HttpClient Http
@inject NavigationManager navMan
@inject BrowserService Service

<div class="sidebar">
    <NavMenu ></NavMenu>
</div>

<div class="main">

    <div class="top-row px-4">
        <SearchBox></SearchBox>
        <div class="acc-link">
            @if (LoggedIn)
            {
                <a href="/" class="log-out" @onclick="(() => AuthProvider.LogOut(Http))">выйти</a>
                <a href="@Link" class="orders-link-short">Заказы</a>
                <a href="@Link" class="acc-link-short">@Name</a>
            }
            else
            {
                <div class="acc-link-login">
                    <a href="@Link">@Name</a>
                </div>

            }
        </div>
        <NavLink href="/crt" class="cart-link" Match="NavLinkMatch.All"><span class="oi oi-cart"></span> <span class="cart-string"> @CartString </span> </NavLink>


    </div>

    <div class="content px-4">
        @Body
    </div>
    @if (Body != null)
    {


<div class="footer px-4">
    <div class="footer-block"><p>КОМПАНИЯ</p> <a href="#">Новости</a></div>
    <div class="footer-block"><p>ПОМОЩЬ</p> <a href="#">Обратная связь</a></div>
    <div class="footer-block"><p>ОБСЛУЖИВАНИЕ</p> <a href="#">Сервисные центры</a></div>
    <div class="footer-block"><p>РАЗНОЕ</p> <a href="#">Акции</a></div>
</div>
    }
</div>


@code {
    private Dictionary<string, int> cart;
    private int CountCart = 0;
    private long cartPrice = 0;
    public string Name { get; set; }
    public string Link { get; set; }
    public bool LoggedIn { get; set; }
    public string CartString
    {
        get
        {
            if (CountCart == 0)
                return "Корзина пуста";
            if (CountCart > 4)
                return String.Format("{0} товаров {1} ₽", CountCart, cartPrice);
            if (CountCart > 1)
                return String.Format("{0} товара {1} ₽", CountCart, cartPrice);
            return String.Format("{0} товар {1} ₽", CountCart, cartPrice);
        }
    }
    private int GetCount()
    {
        int res = 0;
        if (cart == null)
            return res;
        foreach (var item in cart)
            res += item.Value;
        return res;
    }
    async Task GetName()
    {
        try
        {
            LoggedIn = true;
            Name = await AuthProvider.AuthAction(Http, (() => Http.GetStringAsync("account/GetName")));
            Link = "/ord";
        }
        catch (Exception ex)
        {
            LoggedIn = false;
            Name = "Войти | Зарегистрироваться";
            Link = "/acc/login/" + Uri.EscapeDataString(navMan.Uri);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        cart = await LocalStore.GetItemAsync<Dictionary<string, int>>("cart");
        CountCart = GetCount();
        cartPrice = await LocalStore.GetItemAsync<long>("cartPrice");
        await GetName();
        navMan.LocationChanged += (async (x, e) => await GetName());
        LocalStore.Changed += async (x, e) =>
        {
            cart = await LocalStore.GetItemAsync<Dictionary<string, int>>("cart");
            CountCart = GetCount();
            cartPrice = await LocalStore.GetItemAsync<long>("cartPrice");
            await GetName();
            this.StateHasChanged();
        };
    }

}