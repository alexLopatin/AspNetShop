@page "/cat/{category:int}/{page:int}"
@inject HttpClient Http
@if (name != null)
{
    <h3 style="margin-bottom:25px"> @name </h3>
}

@if (products != null)
{
    @foreach (Product p in products)
    {
        <div class="product-short">
            <NavLink href="@{String.Format("/prod/{0}", p.Id)}" Match="NavLinkMatch.All"><p>@p.Name</p></NavLink>
            <div class="rating">
                @for (int i = 0; i < p.Rating; i++)
                {
                    <span class="oi oi-star" style="display:inline-block; color:indigo;"></span>
                }
                @for (int i = (int)Math.Ceiling(p.Rating); i < 5; i++)
                {
                    <span class="oi oi-star" style="display:inline-block; color:lightgray;"></span>
                }
            </div>
            @if (p.OldPrice > p.NewPrice)
            {
                <p>@p.NewPrice ₽  <strike>@p.OldPrice ₽</strike> </p>
            }
            else
            {
                <p>@p.NewPrice ₽</p>
            }


            <img src="/thumbs/@(p.Id).jpg" />
        </div>
    }
}

@code {
    Product[] products;
    string name { get; set; } = "";
    [Parameter]
    public int category { get; set; }
    [Parameter]
    public int page { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        var response = await Http.GetAsync(String.Format("Catalog/GetName?cat={0}", category));
        name = await response.Content.ReadAsStringAsync();
        products = await Http.GetFromJsonAsync<Product[]>(String.Format("Catalog/LoadProducts?cat={0}&page={1}", category, page));
    }
}
